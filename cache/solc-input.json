{
  "language": "Solidity",
  "sources": {
    "contracts/Mai.sol": {
      "content": "pragma solidity 0.6.4;\ninterface ERC20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address account) external view returns (uint);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint amount);\n    event Approval(address indexed owner, address indexed spender, uint amount);\n}\nlibrary SafeMath {\n function sub(uint a, uint b) internal pure returns (uint) {\n  assert(b <= a);\n  return a - b;\n  }\n\n function add(uint a, uint b) internal pure returns (uint)   {\n  uint c = a + b;\n  assert(c >= a);\n  return c;\n  }\n  function mul(uint a, uint b) internal pure returns (uint) {\n      if (a == 0) {\n          return 0;\n      }\n      uint c = a * b;\n      require(c / a == b, \"SafeMath: multiplication overflow\");\n      return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n      return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n      require(b > 0, errorMessage);\n      uint c = a / b;\n      return c;\n  }\n}\ncontract MAI is ERC20{\n    using SafeMath for uint;\n    string public name = \"MAI Asset\";\n    string public symbol = \"MAI\";\n    uint public decimals  = 18;\n    uint public override totalSupply;\n    uint public _1 = 10**decimals;\n    bool private notEntered;\n\n    mapping(address => uint) public override balanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n\n    uint public minCollaterisation;\n    uint public defaultCollateralisation;\n    uint public etherPrice;\n    uint public medianMAIValue;\n    address[] public arrayAnchor;\n    uint public mintedMAI;\n    uint public pooledMAI;\n    uint public incentiveFactor = 10;\n    mapping(address => MemberData) public mapAddress_MemberData;\n    address[] public members;\n    struct MemberData {\n        address[] exchanges;\n        uint CDP;\n    }\n  \n    mapping(uint => CDPData) public mapCDP_Data;\n    uint public countOfCDPs;\n    struct CDPData {\n        uint collateral;\n        uint debt;\n        address payable owner;\n    }\n    mapping(address => ExchangeData) public mapAsset_ExchangeData;\n    \n    address[] public exchanges;\n     struct ExchangeData {\n        bool listed;\n        bool isAnchor;\n        uint balanceMAI;\n        uint balanceAsset;\n        address[] stakers;\n        uint poolUnits;\n        mapping(address => uint) stakerUnits;\n        mapping(address => bool) isActivePoolStaker;\n    }\n    event Transfer (address indexed from, address indexed to, uint amount);\n    event Approval ( address indexed owner, address indexed spender, uint amount);\n\n    event NewCDP(uint CDP, uint time, address owner, uint debtIssued, uint collateralHeld, uint collateralisation);\n    event UpdateCDP(uint CDP, uint time, address owner, uint debtAdded, uint collateralAdded, uint collateralisation);\n    event CloseCDP(uint CDP, uint time, address owner, uint debtPaid, uint etherReturned);\n    event LiquidateCDP(uint CDP, uint time, address liquidator, uint liquidation, uint etherSold, uint maiBought, uint debtDeleted, uint feeClaimed);\n    event AddLiquidity(address asset, address liquidityProvider, uint amountMAI, uint amountAsset, uint unitsIssued);\n    event RemoveLiquidity(address asset, address liquidityProvider, uint amountMAI, uint amountAsset, uint unitsClaimed);\n    event Swapped(address assetFrom, address assetTo, uint inputAmount, uint maiAmount, uint outPutAmount, address recipient);\n    event AnchorRemoved(address assetAnchor, uint delta, uint assetValue, address recipient);\n    //======##Getters##======\n    function calcStakerUnits(address asset, address staker) public view returns(uint stakerUnits){\n         return (mapAsset_ExchangeData[asset].stakerUnits[staker]);\n    }\n    function calcStakerAddress(address asset, uint index) public view returns(address staker){\n        return(mapAsset_ExchangeData[asset].stakers[index]);\n    }\n    function calcStakerCount(address asset) public view returns (uint){\n        return(mapAsset_ExchangeData[asset].stakers.length);\n    }\n    function getExhangesCount() public view returns (uint){\n        return exchanges.length;\n    }\n    function getAnchorsCount() public view returns (uint){\n        return arrayAnchor.length;\n    }\n    function getMembersCount() public view returns (uint){\n        return members.length;\n    }\n    function getMemberExchangeCount(address member) public view returns (uint){\n        return (mapAddress_MemberData[member].exchanges.length);\n    }\n    function getStakerExchanges (address member, uint index) public view returns (address exchange){\n         return (mapAddress_MemberData[member].exchanges[index]);\n    }\n\n    function transfer(address to, uint amount) public override  returns (bool success) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n    function approve(address spender, uint amount) public override  returns (bool success) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n    function _approve(address _approver, address _spender, uint _amount) internal returns (bool success){\n        allowance[_approver][_spender] = _amount;\n        emit Approval(_approver, _spender, _amount);\n        return true;\n    }\n    function _transfer(address _from, address _to, uint _amount) internal returns (bool success) {\n        require(balanceOf[_from] >= _amount,'Sender must have enough to spend');\n        balanceOf[_from] = balanceOf[_from].sub(_amount);\n        balanceOf[_to] = balanceOf[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    function transferFrom(address from, address to, uint amount) public override returns (bool success) {\n        require(amount <= allowance[from][to], 'Sender must have enough allowance to send');\n        allowance[from][to] = allowance[from][to].sub(amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function _mint(uint _amount) internal returns (bool success){\n        require(_amount > 0);\n        totalSupply = totalSupply.add(_amount);\n        balanceOf[address(this)] = balanceOf[address(this)].add(_amount);\n        emit Transfer(address(0), address(this), _amount);\n        return true;\n    }\n\n    function _burn(uint _amount) internal returns (bool success){\n        require (_amount > 0); require (_amount <= balanceOf[address(this)]);\n        totalSupply = totalSupply.sub(_amount);\n        balanceOf[address(this)] = balanceOf[address(this)].sub(_amount);\n        emit Transfer(address(this), address(0), _amount);\n        return true;\n    }\n\n    constructor () public payable {\n        notEntered = true;\n        defaultCollateralisation = 150;\n        minCollaterisation = 101;\n        medianMAIValue = _1;\n        uint genesisPrice = 200;\n        uint purchasingPower = (msg.value/3) * genesisPrice; \n        _mint(purchasingPower*2);\n        mapAsset_ExchangeData[address(0)].balanceAsset = msg.value/3;  \n        mapAsset_ExchangeData[address(0)].balanceMAI = purchasingPower;\n        uint poolUnit = ((msg.value/3).add(purchasingPower))/2;\n        mapAsset_ExchangeData[address(0)].poolUnits = poolUnit;\n        mapAsset_ExchangeData[address(0)].stakers.push(msg.sender);\n        mapAsset_ExchangeData[address(0)].isActivePoolStaker[msg.sender] = true;\n        mapAsset_ExchangeData[address(0)].stakerUnits[msg.sender] += poolUnit;\n        mapAddress_MemberData[msg.sender].exchanges.push(address(0));\n        uint mintAmount = (purchasingPower.mul(100)).div(defaultCollateralisation);\n        uint CDP = 0; countOfCDPs = 0; \n        mapAddress_MemberData[address(0)].CDP = CDP;\n        mapCDP_Data[CDP].collateral = (msg.value.mul(2)).div(3);\n        mapCDP_Data[CDP].debt = mintAmount;\n        mapCDP_Data[CDP].owner = address(0);\n        mapAsset_ExchangeData[address(0)].listed = true;\n        exchanges.push(address(0));\n        _transfer(address(this), msg.sender, purchasingPower);\n        emit NewCDP(CDP, now, msg.sender, mintAmount, msg.value, defaultCollateralisation);\n    }\n    \n    function addExchange(address asset, uint amountAsset, uint amountMAI) public payable returns (bool success){\n         require((amountMAI > 0) && ((amountAsset > 0)), \"Must get Mai or token\");\n         _transfer(msg.sender, address(this), amountMAI);\n         ERC20(asset).transferFrom(msg.sender, address(this), amountAsset);\n         mapAsset_ExchangeData[asset].balanceMAI = amountMAI;\n         mapAsset_ExchangeData[asset].balanceAsset = amountAsset;\n         exchanges.push(asset);  // Add new exchange\n         mapAsset_ExchangeData[asset].listed = true;\n         uint poolUnitInit = ((amountAsset).add(amountMAI))/2;\n         mapAsset_ExchangeData[asset].poolUnits = poolUnitInit;\n         mapAsset_ExchangeData[asset].stakerUnits[msg.sender] += poolUnitInit;\n         mapAsset_ExchangeData[asset].isActivePoolStaker[msg.sender] = true;\n        emit AddLiquidity(asset, msg.sender, amountMAI, amountAsset, poolUnitInit);\n        return true;\n    }\n\n    receive() external payable {\n      require (msg.value > 0, 'Must be more than 0 to open CDP');\n      _manageCDP(msg.sender, msg.value, defaultCollateralisation);\n    }\n\n    function openCDP(uint collateralisation) public payable returns (bool success) {\n      require (msg.value > 0, 'Must be more than 0 to open CDP');\n      require (collateralisation >= minCollaterisation, \"Must be greater than 101%\");\n      _manageCDP(msg.sender, msg.value, collateralisation);\n      return true;\n    }\n\n    function addCollateralToCDP() public payable returns (bool success) {\n        require (msg.value > 0, 'Must be more than 0 to open CDP');\n        uint CDP = mapAddress_MemberData[msg.sender].CDP;\n        uint collateralisation;\n        require (CDP > 0, \"Must be an owner already\");\n        mapCDP_Data[CDP].collateral += msg.value;\n        uint purchasingPower = calcEtherPPinMAI(mapCDP_Data[CDP].collateral);//how valuable Ether is in MAI\n        if(mapCDP_Data[CDP].debt == 0){\n         collateralisation = ((purchasingPower).mul(100)).mul(10);\n        }else{\n         collateralisation = ((purchasingPower).mul(100)).div(mapCDP_Data[CDP].debt);\n        }\n        emit UpdateCDP(CDP, now, msg.sender, 0, msg.value, collateralisation);\n        return true;\n    }\n\n    function remintMAIFromCDP(uint collateralisation) public payable returns (bool success) {\n        require (collateralisation >= minCollaterisation, \"Must be greater than 101%\");\n        uint CDP = mapAddress_MemberData[msg.sender].CDP;\n        require (CDP != 0, \"Must be an owner already\");\n        uint collateral = mapCDP_Data[CDP].collateral;\n        uint purchasingPower = calcEtherPPinMAI(collateral);//how valuable Ether is in MAI\n        uint maxMintAmount = (purchasingPower.mul(100)).div(collateralisation);\n        uint additionalMintAmount = maxMintAmount.sub(mapCDP_Data[CDP].debt);\n        mapCDP_Data[CDP].debt += additionalMintAmount;\n        _mint(additionalMintAmount);\n        require (_transfer(address(this), msg.sender, additionalMintAmount), 'Must transfer mint amount to sender');\n        emit UpdateCDP(CDP, now, msg.sender, additionalMintAmount, 0, collateralisation);\n        return true;\n    }\n\n    function _manageCDP(address payable _owner, uint _value, uint _collateralisation) internal returns (bool success){\n      uint purchasingPower = calcEtherPPinMAI(_value);//how valuable Ether is in MAI\n      uint mintAmount = (purchasingPower.mul(100)).div(_collateralisation);\n      uint CDP = mapAddress_MemberData[_owner].CDP;\n      if (CDP != 0) {\n          mapCDP_Data[CDP].collateral += _value;\n          mapCDP_Data[CDP].debt += mintAmount;\n      } else {\n          countOfCDPs += 1;\n          CDP = countOfCDPs;\n          mapAddress_MemberData[_owner].CDP = CDP;\n          mapCDP_Data[CDP].collateral = _value;\n          mapCDP_Data[CDP].debt = mintAmount;\n          mapCDP_Data[CDP].owner = _owner;\n      }\n      _mint(mintAmount);\n      require (_transfer(address(this), _owner, mintAmount), 'Must transfer mint amount to sender');\n      emit NewCDP(CDP, now, _owner, mintAmount, _value, _collateralisation);\n      return true;\n    }\n\n    function closeCDP(uint _liquidation) public returns (bool success){\n      uint CDP = mapAddress_MemberData[msg.sender].CDP;\n      require(CDP != 0, 'CDP must exist'); //require CDP exists\n      require(_liquidation > 0, 'Liquidation must be greater than 0'); //require liquidation to be greater than 0\n      require(_liquidation <= 10000, 'Liquidation must be less than 10k');\n      uint debt = mapCDP_Data[CDP].debt;\n      uint basisPoints = 10000;\n      uint closeAmount = debt.div(basisPoints.div(_liquidation));\n      uint collateral = mapCDP_Data[CDP].collateral;\n      uint returnAmount = collateral.div(basisPoints.div(_liquidation));\n     // require(MAI._approve(msg.sender, address(this), closeAmount), 'Must approve first');\n      //require(MAI.transferFrom(msg.sender, address(this), closeAmount), 'must collect debt');\n       require (_transfer(msg.sender, address(this), closeAmount), 'Must transfer closeAmount to sender');\n       require(_burn(closeAmount), 'Must burn debt');\n      mapCDP_Data[CDP].debt -= closeAmount;\n      mapCDP_Data[CDP].collateral -= returnAmount;\n      msg.sender.transfer(returnAmount);\n      emit CloseCDP(CDP, now, msg.sender, closeAmount, returnAmount);\n      return true;\n    }\n\n    function liquidateCDP(uint CDP, uint liquidation) public returns (bool success){\n        require(CDP > 0, \"must be greater than 0\");\n        require(CDP <= countOfCDPs, \"must exist\");\n        require(liquidation > 0, 'Liquidation must be greater than 0'); //require liquidation to be greater than 0\n        require(liquidation <= 3333, 'Liquidation must be less than 33%');\n        if (checkLiquidationPoint(CDP)){\n            uint collateral = mapCDP_Data[CDP].collateral;\n            uint debt = mapCDP_Data[CDP].debt;\n            uint basisPoints = 10000;\n            uint liquidatedCollateral = (collateral.mul(liquidation)).div(basisPoints);\n            uint debtDeleted = (debt.mul(liquidation)).div(basisPoints);\n            uint maiBought; uint _y = 0;\n            (maiBought, _y) = _swapTokenToToken(address(0), address(this), liquidatedCollateral);\n            uint fee = maiBought - debtDeleted;\n            mapCDP_Data[CDP].collateral -= liquidatedCollateral;\n            mapCDP_Data[CDP].debt -= debtDeleted;\n            emit LiquidateCDP(CDP, now, msg.sender, liquidation, liquidatedCollateral, maiBought, debtDeleted, fee);\n            _burn(debtDeleted);\n            require(_transfer(address(this), address(msg.sender), fee), \"must transfer fee\");\n            return true;\n        }   else {\n            return false;\n        }\n    }\n\n    //==================================================================================//\n    // Liquidity functions\n    function addLiquidityToEtherPool (uint amountMAI) public payable returns (bool success) {\n        require((amountMAI > 0) || ((msg.value > 0)), \"Must get Mai or Eth\");\n        //require(transferFrom(msg.sender, address(this), amountMAI), \"Must collect MAI\");\n        _transfer(msg.sender, address(this), amountMAI);\n        _addLiquidity(address(0), msg.value, amountMAI);\n        return true;\n    }\n\n    function addLiquidityToAssetPool (address asset, uint amountAsset, uint amountMAI) public returns (bool success) {\n        ERC20(asset).transferFrom(msg.sender, address(this), amountAsset);  \n        //require(transferFrom(msg.sender, address(this), amountMAI), \"Must collect MAI\");\n        _transfer(msg.sender, address(this), amountMAI);\n        _addLiquidity(asset, amountAsset, amountMAI);\n        return true;\n    }\n \n    function _addLiquidity(address asset, uint a, uint m) internal {\n        if (!mapAsset_ExchangeData[asset].isActivePoolStaker[msg.sender]){\n            mapAsset_ExchangeData[asset].stakers.push(msg.sender);\n            mapAddress_MemberData[msg.sender].exchanges.push(asset);\n            members.push(msg.sender);\n            mapAsset_ExchangeData[asset].isActivePoolStaker[msg.sender] = true;\n        }\n        mapAsset_ExchangeData[asset].balanceMAI += m;\n        mapAsset_ExchangeData[asset].balanceAsset += a;\n        uint M = mapAsset_ExchangeData[asset].balanceMAI;\n        uint A = mapAsset_ExchangeData[asset].balanceAsset;\n        uint units = calcStakeUnits(a, A, m, M);\n        mapAsset_ExchangeData[asset].poolUnits += units;\n        mapAsset_ExchangeData[asset].stakerUnits[msg.sender] += units;\n        emit AddLiquidity(asset, msg.sender, m, a, units);\n    }\n\n    function removeLiquidityPool(address asset, uint bp) public returns (bool success) {\n        uint _outputMAI; uint _outputAsset;\n        (_outputMAI, _outputAsset) = _removeLiquidity(asset, bp);\n        if(asset == address(0)){\n            msg.sender.transfer(_outputAsset);\n        } else {\n            ERC20(asset).transfer(msg.sender, _outputAsset);\n        }\n        require (_transfer(address(this), msg.sender, _outputMAI));\n        return true;\n    }\n\n    function _removeLiquidity(address _asset, uint _bp) internal returns (uint _outputMAI, uint _outputAsset) {\n        require(mapAsset_ExchangeData[_asset].stakerUnits[msg.sender] > 0);\n        require(_bp <= 10000); require(_bp > 0);\n        uint _basisPoints = 10000;\n        uint _stakerUnits = mapAsset_ExchangeData[_asset].stakerUnits[msg.sender];\n        uint _units = (_stakerUnits.mul(_bp)).div(_basisPoints);\n        uint _total = mapAsset_ExchangeData[_asset].poolUnits;\n        uint _balanceMAI = mapAsset_ExchangeData[_asset].balanceMAI;\n        uint _balanceAsset = mapAsset_ExchangeData[_asset].balanceAsset;\n        _outputMAI = (_balanceMAI.mul(_units)).div(_total);\n        _outputAsset = (_balanceAsset.mul(_units)).div(_total);\n        mapAsset_ExchangeData[_asset].stakerUnits[msg.sender] -= _units;\n        mapAsset_ExchangeData[_asset].poolUnits -= _units;\n        mapAsset_ExchangeData[_asset].balanceMAI -= _outputMAI;\n        mapAsset_ExchangeData[_asset].balanceAsset -= _outputAsset;\n        emit RemoveLiquidity(_asset, msg.sender, _outputMAI, _outputAsset, _units);\n        return(_outputMAI, _outputAsset);\n    }\n\n    function swapTokenToToken(address assetFrom, address assetTo, uint inputAmount) public payable returns (bool success) {\n        require((inputAmount > 0), \"Must get Asset\");\n        uint maiAmount = 0; uint outputAmount = 0;\n        if(assetFrom == address(0)){\n            require ((msg.value == inputAmount), 'must get ETH');\n        } else if (assetFrom == address(this)){\n            _transfer(msg.sender, address(this), inputAmount); \n        } else {\n            ERC20(assetFrom).transferFrom(msg.sender, address(this), inputAmount);\n        }\n        (maiAmount, outputAmount) = _swapTokenToToken(assetFrom, assetTo, inputAmount);\n        emit Swapped(assetFrom, assetTo, inputAmount, maiAmount, outputAmount, msg.sender);\n        _handleTransferOut(assetTo, maiAmount, outputAmount,  msg.sender);\n        _checkAnchor(assetFrom, assetTo);\n        return true;\n    }\n\n    function _swapTokenToToken(address _assetFrom, address _assetTo, uint _amount) internal returns(uint _m, uint _y){ \n        if(_assetFrom == address(this)){\n            _m=0;\n            _y = _swapMaiToAsset(_assetTo, _amount);  \n        }\n        if(_assetTo == address(this)){\n            _m= _swapAssetToMai(_assetFrom, _amount);\n            _y = 0;\n        }\n        if(_assetFrom != address(this) && _assetTo != address(this)){\n            _m = _swapAssetToMai(_assetFrom, _amount);\n            _y = _swapMaiToAsset(_assetTo, _m);\n        }   \n        return (_m, _y);\n    }\n\n    function _swapAssetToMai(address _assetFrom, uint _x) internal returns (uint _y){\n        uint _X = mapAsset_ExchangeData[_assetFrom].balanceAsset;\n        uint _Y = mapAsset_ExchangeData[_assetFrom].balanceMAI;\n        _y = calcCLPSwap(_x, _X, _Y);\n        mapAsset_ExchangeData[_assetFrom].balanceAsset += _x;\n        mapAsset_ExchangeData[_assetFrom].balanceMAI -= _y;\n        return _y;\n    }\n\n    function _swapMaiToAsset(address _assetTo, uint _x) internal returns (uint _y){\n        uint _X = mapAsset_ExchangeData[_assetTo].balanceMAI;\n        uint _Y = mapAsset_ExchangeData[_assetTo].balanceAsset;\n        if(mapAsset_ExchangeData[_assetTo].isAnchor){\n         _x = _adjustAmountIfAnchor(_assetTo, _x);\n        }\n         _y = calcCLPSwap(_x, _X, _Y);\n        mapAsset_ExchangeData[_assetTo].balanceMAI += _x;\n        mapAsset_ExchangeData[_assetTo].balanceAsset -= _y;\n        return _y;\n    }\n\n    //======================================================================\n    //Anchors\n    function addAnchor(address asset, uint amountAsset, uint amountMAI) public payable returns (bool success){\n        require((arrayAnchor.length < 5), \"must only have 5 anchors\");\n        if(!mapAsset_ExchangeData[asset].isAnchor){\n            _transfer(msg.sender, address(this), amountMAI);\n       // require(MAI.transferFrom(msg.sender, address(this), amountMAI), 'must collect mai');\n        ERC20(asset).transferFrom(msg.sender, address(this), amountAsset);\n        mapAsset_ExchangeData[asset].listed = true;\n        mapAsset_ExchangeData[asset].isAnchor = true;\n        _addLiquidity(asset, amountAsset, amountMAI);\n        arrayAnchor.push(asset);\n        exchanges.push(asset);\n        }\n        return true;\n    }\n    // function removeAnchor(address asset) public returns (bool success){\n    //     require((mapAsset_ExchangeData[asset].isAnchor = true), \"must be an anchor\");\n    //     uint maxAnchorSlip = 10**17;\n    //     uint assetValue = calcValueInAsset(asset);\n    //     uint numerator = assetValue.sub(medianMAIValue);\n    //     uint denominator =(assetValue.add(medianMAIValue)).div(2);\n    //     uint delta = ((_1.mul(numerator)).div(denominator));\n    //     require((delta > maxAnchorSlip), \"percentage difference > anchor limit percentage \");\n    //     for (uint i=0; i < arrayAnchor.length; i++) {\n    //          if (arrayAnchor[i] == asset){\n    //              arrayAnchor[i] = arrayAnchor[arrayAnchor.length - 1];\n    //              arrayAnchor.pop();\n    //             }\n    //     }\n    //     //_nukeAnchor(asset);  \n    //     emit AnchorRemoved(asset, delta, assetValue, msg.sender);\n                \n    //     return true;\n    // }\n   \n    // function _nukeAnchor(address _asset) internal returns (bool success){\n    //      uint _outputMAI; uint _outputAsset; uint _bp = 10000;\n    //     for(uint i = 0; i < mapAsset_ExchangeData[_asset].stakers[].length; i++){\n    //     (_outputMAI, _outputAsset) = _removeLiquidity(_asset, _bp);\n    //     ERC20(_asset).transfer(mapAsset_ExchangeData[_asset].stakers[i], _outputAsset);\n    //     require (_transfer(address(this), mapAsset_ExchangeData[_asset].stakers[i], _outputMAI));\n    //     }\n    //     mapAsset_ExchangeData[asset].isAnchor = false;\n    // }\n\n    function _checkAnchor(address _assetFrom, address _assetTo) internal {\n        address anchor = address(0);\n        if(mapAsset_ExchangeData[_assetFrom].isAnchor){\n            anchor = _assetFrom;\n        } else if (mapAsset_ExchangeData[_assetTo].isAnchor) {\n            anchor = _assetTo;\n        }\n        if(anchor != address(0)){\n            updatePrice();\n        }\n    }\n\n    function updatePrice() public {\n        uint[5] memory arrayPrices;\n        for(uint i = 0; i < 5; i++){\n            arrayPrices[i] = (calcValueInMAI(arrayAnchor[i]));\n        }\n        uint[5] memory sortedPriceFeed = _sortArray(arrayPrices);\n        medianMAIValue = sortedPriceFeed[2];\n    }\n\n    function _sortArray(uint[5] memory array) internal pure returns (uint[5] memory) {\n        uint l = array.length;\n        for(uint i = 0; i < l; i++) {\n            for(uint j = i+1; j < l ;j++) {\n                if(array[i] > array[j]) {\n                    uint temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n            }\n        }\n        return array;\n    }\n\n    function _adjustAmountIfAnchor(address _asset, uint _amount) internal returns (uint _x){\n        uint maiValueInAsset = calcValueInAsset(_asset);\n        uint delta;\n        if(maiValueInAsset < medianMAIValue){\n            delta = (medianMAIValue.sub(maiValueInAsset)).div(incentiveFactor);\n            uint burn = (_amount.mul(delta)).div(medianMAIValue);\n             _burn(burn);\n             _x = _amount.sub(burn);\n        }\n        if (maiValueInAsset > medianMAIValue){\n            delta = (maiValueInAsset.sub(medianMAIValue)).div(incentiveFactor);\n            uint mint = (_amount.mul(delta)).div(medianMAIValue);\n             _mint(mint);\n             _x = _amount.add(mint);\n        }    \n        return _x;\n    }\n    function _handleTransferOut(address _assetTo, uint maiAmount, uint _amountAsset, address payable _recipient) internal {\n        if (_assetTo == address(0)) {\n            _recipient.transfer(_amountAsset);\n        } else if (_assetTo == address(this)) {\n            _transfer(address(this), _recipient, maiAmount);\n        } else {\n            ERC20(_assetTo).transfer(_recipient, _amountAsset);\n        }\n    }\n\n    //==================================================================================//\n    // Pricing functions\n\n   function calcValueInMAI(address asset) public view returns (uint price){\n       uint balAsset = mapAsset_ExchangeData[asset].balanceAsset;\n       uint balMAI = mapAsset_ExchangeData[asset].balanceMAI;\n       return (_1.mul(balMAI)).div(balAsset);\n   }\n\n    function calcValueInAsset(address asset) public view returns (uint price){\n       uint balAsset = mapAsset_ExchangeData[asset].balanceAsset;\n       uint balMAI = mapAsset_ExchangeData[asset].balanceMAI;\n       return (_1.mul(balAsset)).div(balMAI);\n   }\n\n   function calcEtherPriceInUSD(uint amount) public view returns (uint amountBought){\n       uint etherPriceInMAI = calcValueInMAI(address(0));\n    //    uint maiPriceInUSD = calcValueInAsset(exchangeUSD);\n       uint ethPriceInUSD = medianMAIValue.mul(etherPriceInMAI).div(_1);//\n       return (amount.mul(ethPriceInUSD)).div(_1);\n   }\n\n   function calcEtherPPinMAI(uint amount) public view returns (uint amountBought){\n        uint etherBal = mapAsset_ExchangeData[address(0)].balanceAsset;\n        uint balMAI = mapAsset_ExchangeData[address(0)].balanceMAI;\n        uint outputMAI = calcCLPSwap(amount, etherBal, balMAI);\n        return outputMAI;\n   }\n\n   function checkLiquidationPoint(uint CDP) public view returns (bool canLiquidate){\n        uint collateral = mapCDP_Data[CDP].collateral;\n        uint debt = mapCDP_Data[CDP].debt;\n        uint etherBal = mapAsset_ExchangeData[address(0)].balanceAsset;\n        uint balMAI = mapAsset_ExchangeData[address(0)].balanceMAI;\n        uint outputMAI = calcCLPLiquidation(collateral, etherBal, balMAI);\n        if(outputMAI < debt) {\n            canLiquidate = true;\n        } else {\n            canLiquidate = false;\n        }\n        return canLiquidate;\n   }\n\n   //##############################################\n   //ClP functions\n\n    function calcCLPSwap(uint x, uint X, uint Y) public pure returns (uint y){\n        // y = (x * Y * X)/(x + X)^2\n        uint numerator = x.mul(Y.mul(X));\n        uint denominator = (x.add(X)).mul(x.add(X));\n        y = numerator.div(denominator);\n        return y;\n    }\n\n    function calcCLPFee(uint x, uint X, uint Y) public pure returns (uint y){\n        // y = (x * Y * x) / (x + X)^2\n        uint numerator = x.mul(Y.mul(x));\n        uint denominator = (x.add(X)).mul(x.add(X));\n        y = numerator.div(denominator);\n        return y;\n    }\n\n    function calcCLPLiquidation(uint x, uint X, uint Y) public pure returns (uint y){\n        // y = (x * Y * (X - x))/(x + X)^2\n        uint numerator = (x.mul(Y.mul(X.sub(x))));\n        uint denominator = (x.add(X)).mul(x.add(X));\n        y = numerator.div(denominator);\n        return y;\n    }\n\n    function calcStakeUnits(uint a, uint A, uint m, uint M) public pure returns (uint units){\n        // ((M + A) * (m * A + M * a))/(4 * M * A)\n        uint numerator1 = M.add(A);\n        uint numerator2 = m.mul(A);\n        uint numerator3 = M.mul(a);\n        uint numerator = numerator1.mul((numerator2.add(numerator3)));\n        uint denominator = 4 * (M.mul(A));\n        units = numerator.div(denominator);\n        return units;\n    }\n}\n"
    },
    "contracts/Migrations.sol": {
      "content": "pragma solidity >=0.4.21 <0.7.0;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n"
    },
    "contracts/tokenUSD1.sol": {
      "content": "pragma solidity 0.6.4;\n\n//IERC20 Interface\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Token Contract\ncontract PAXOS is ERC20 {\n\n    using SafeMath for uint256;\n\n    // Coin Defaults\n    string public name;                                         // Name of Coin\n    string public symbol;                                       // Symbol of Coin\n    uint256 public decimals  = 18;                              // Decimals\n    uint256 public override totalSupply  = 1000000 * (10 ** decimals);   // 1,000,000 Total\n\n    // Mapping\n    mapping(address => uint256) public override balanceOf;                          // Map balanceOf\n    mapping(address => mapping(address => uint256)) public override allowance;    // Map allowances\n    \n    // Events\n    event Approval(address indexed owner, address indexed spender, uint value); // ERC20\n    event Transfer(address indexed from, address indexed to, uint256 value);    // ERC20\n\n    // Minting event\n    constructor() public{\n        balanceOf[msg.sender] = totalSupply;\n        name = \"PAXOS\";\n        symbol  = \"PAX\";\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n    \n    // ERC20\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // ERC20\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // ERC20\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // Transfer function which includes the network fee\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);                 // catch overflow       \n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);                       // Subtract from sender         \n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add to receiver\n        \n        emit Transfer(_from, _to, _value);                    // Transaction event            \n    }\n}"
    },
    "contracts/tokenUSD2.sol": {
      "content": "pragma solidity 0.6.4;\n\n//IERC20 Interface\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Token Contract\ncontract Tether is ERC20 {\n\n    using SafeMath for uint256;\n\n    // Coin Defaults\n    string public name;                                         // Name of Coin\n    string public symbol;                                       // Symbol of Coin\n    uint256 public decimals  = 18;                              // Decimals\n    uint256 public override totalSupply  = 1000000 * (10 ** decimals);   // 1,000,000 Total\n\n    // Mapping\n    mapping(address => uint256) public override balanceOf;                          // Map balanceOf\n    mapping(address => mapping(address => uint256)) public override allowance;    // Map allowances\n    \n    // Events\n    event Approval(address indexed owner, address indexed spender, uint value); // ERC20\n    event Transfer(address indexed from, address indexed to, uint256 value);    // ERC20\n\n    // Minting event\n    constructor() public{\n        balanceOf[msg.sender] = totalSupply;\n        name = \"TETHER\";\n        symbol  = \"tUSD\";\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n    \n    // ERC20\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // ERC20\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // ERC20\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // Transfer function which includes the network fee\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);                 // catch overflow       \n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);                       // Subtract from sender         \n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add to receiver\n        \n        emit Transfer(_from, _to, _value);                    // Transaction event            \n    }\n}"
    },
    "contracts/tokenUSD3.sol": {
      "content": "pragma solidity 0.6.4;\n\n//IERC20 Interface\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Token Contract\ncontract bUSD is ERC20 {\n\n    using SafeMath for uint256;\n\n    // Coin Defaults\n    string public name;                                         // Name of Coin\n    string public symbol;                                       // Symbol of Coin\n    uint256 public decimals  = 18;                              // Decimals\n    uint256 public override totalSupply  = 1000000 * (10 ** decimals);   // 1,000,000 Total\n\n    // Mapping\n    mapping(address => uint256) public override balanceOf;                          // Map balanceOf\n    mapping(address => mapping(address => uint256)) public override allowance;    // Map allowances\n    \n    // Events\n    event Approval(address indexed owner, address indexed spender, uint value); // ERC20\n    event Transfer(address indexed from, address indexed to, uint256 value);    // ERC20\n\n    // Minting event\n    constructor() public{\n        balanceOf[msg.sender] = totalSupply;\n        name = \"BUSD\";\n        symbol  = \"bUSD\";\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n    \n    // ERC20\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // ERC20\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // ERC20\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // Transfer function which includes the network fee\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);                 // catch overflow       \n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);                       // Subtract from sender         \n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add to receiver\n        \n        emit Transfer(_from, _to, _value);                    // Transaction event            \n    }\n}"
    },
    "contracts/tokenUSD4.sol": {
      "content": "pragma solidity 0.6.4;\n\n//IERC20 Interface\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Token Contract\ncontract USDC is ERC20 {\n\n    using SafeMath for uint256;\n\n    // Coin Defaults\n    string public name;                                         // Name of Coin\n    string public symbol;                                       // Symbol of Coin\n    uint256 public decimals  = 18;                              // Decimals\n    uint256 public override totalSupply  = 1000000 * (10 ** decimals);   // 1,000,000 Total\n\n    // Mapping\n    mapping(address => uint256) public override balanceOf;                          // Map balanceOf\n    mapping(address => mapping(address => uint256)) public override allowance;    // Map allowances\n    \n    // Events\n    event Approval(address indexed owner, address indexed spender, uint value); // ERC20\n    event Transfer(address indexed from, address indexed to, uint256 value);    // ERC20\n\n    // Minting event\n    constructor() public{\n        balanceOf[msg.sender] = totalSupply;\n        name = \"USDC\";\n        symbol  = \"USDc\";\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n    \n    // ERC20\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // ERC20\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // ERC20\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // Transfer function which includes the network fee\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);                 // catch overflow       \n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);                       // Subtract from sender         \n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add to receiver\n        \n        emit Transfer(_from, _to, _value);                    // Transaction event            \n    }\n}"
    },
    "contracts/tokenUSD5.sol": {
      "content": "pragma solidity 0.6.4;\n\n//IERC20 Interface\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Token Contract\ncontract DAI is ERC20 {\n\n    using SafeMath for uint256;\n\n    // Coin Defaults\n    string public name;                                         // Name of Coin\n    string public symbol;                                       // Symbol of Coin\n    uint256 public decimals  = 18;                              // Decimals\n    uint256 public override totalSupply  = 1000000 * (10 ** decimals);   // 1,000,000 Total\n\n    // Mapping\n    mapping(address => uint256) public override balanceOf;                          // Map balanceOf\n    mapping(address => mapping(address => uint256)) public override allowance;    // Map allowances\n    \n    // Events\n    event Approval(address indexed owner, address indexed spender, uint value); // ERC20\n    event Transfer(address indexed from, address indexed to, uint256 value);    // ERC20\n\n    // Minting event\n    constructor() public{\n        balanceOf[msg.sender] = totalSupply;\n        name = \"DAI\";\n        symbol  = \"DAI\";\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n    \n    // ERC20\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // ERC20\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // ERC20\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // Transfer function which includes the network fee\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);                 // catch overflow       \n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);                       // Subtract from sender         \n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add to receiver\n        \n        emit Transfer(_from, _to, _value);                    // Transaction event            \n    }\n}"
    },
    "contracts/tokenUSD6.sol": {
      "content": "pragma solidity 0.6.4;\n\n//IERC20 Interface\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Token Contract\ncontract Koven is ERC20 {\n\n    using SafeMath for uint256;\n\n    // Coin Defaults\n    string public name;                                         // Name of Coin\n    string public symbol;                                       // Symbol of Coin\n    uint256 public decimals  = 18;                              // Decimals\n    uint256 public override totalSupply  = 1000000 * (10 ** decimals);   // 1,000,000 Total\n\n    // Mapping\n    mapping(address => uint256) public override balanceOf;                          // Map balanceOf\n    mapping(address => mapping(address => uint256)) public override allowance;    // Map allowances\n    \n    // Events\n    event Approval(address indexed owner, address indexed spender, uint value); // ERC20\n    event Transfer(address indexed from, address indexed to, uint256 value);    // ERC20\n\n    // Minting event\n    constructor() public{\n        balanceOf[msg.sender] = totalSupply;\n        name = \"KOVAN\";\n        symbol  = \"KVN\";\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n    \n    // ERC20\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // ERC20\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // ERC20\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // Transfer function which includes the network fee\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);                 // catch overflow       \n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);                       // Subtract from sender         \n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add to receiver\n        \n        emit Transfer(_from, _to, _value);                    // Transaction event            \n    }\n}"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}